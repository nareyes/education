{
	"name": "df_employee_agg_join",
	"properties": {
		"description": "Aggregate and join transformation demo.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_input_employee",
						"type": "DatasetReference"
					},
					"name": "blobEmployee"
				},
				{
					"dataset": {
						"referenceName": "ds_sqldb_input_department",
						"type": "DatasetReference"
					},
					"name": "sqldbDepartment"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sqldb_output_employee_agg",
						"type": "DatasetReference"
					},
					"name": "sqldbEmployeeAggJoin",
					"rejectedDataLinkedService": {
						"referenceName": "ls_azblob",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "selectEmployee"
				},
				{
					"name": "aggregateEmployee"
				},
				{
					"name": "joinDepartment"
				},
				{
					"name": "selectFinal"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_id as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          Salary as integer,",
				"          Dept_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: true,",
				"     partitionBy('hash', 1)) ~> blobEmployee",
				"source(output(",
				"          Dept_Id as integer,",
				"          Dept_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqldbDepartment",
				"blobEmployee select(mapColumn(",
				"          Emp_Id = Emp_id,",
				"          Name,",
				"          Gender,",
				"          Salary,",
				"          Dept_Id = Dept_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectEmployee",
				"selectEmployee aggregate(groupBy(Dept_Id),",
				"     Emp_Count = count(Emp_Id),",
				"          Max_Salary = max(Salary),",
				"          Avg_Salary = avg(Salary)) ~> aggregateEmployee",
				"aggregateEmployee, sqldbDepartment join(aggregateEmployee@Dept_Id == sqldbDepartment@Dept_Id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDepartment",
				"joinDepartment select(mapColumn(",
				"          Dept_Id = aggregateEmployee@Dept_Id,",
				"          Dept_Name,",
				"          Emp_Count,",
				"          Max_Salary,",
				"          Avg_Salary,",
				"          Dept_Id = sqldbDepartment@Dept_Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFinal",
				"selectFinal sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Dept_Id as integer,",
				"          Emp_Count as integer,",
				"          Max_Salary as long,",
				"          Avg_Salary as integer,",
				"          Updated as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Dept_Id,",
				"          Dept_Name,",
				"          Emp_Count,",
				"          Max_Salary,",
				"          Avg_Salary",
				"     )) ~> sqldbEmployeeAggJoin"
			]
		}
	}
}