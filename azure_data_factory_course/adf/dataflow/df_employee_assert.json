{
	"name": "df_employee_assert",
	"properties": {
		"description": "Assert transformation demo.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_input_employee_test",
						"type": "DatasetReference"
					},
					"name": "blobEmployee"
				},
				{
					"dataset": {
						"referenceName": "ds_sqldb_input_department",
						"type": "DatasetReference"
					},
					"name": "sqldbDepartment"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sqldb_output_employee_df",
						"type": "DatasetReference"
					},
					"name": "sqldbEmployeeDF",
					"rejectedDataLinkedService": {
						"referenceName": "ls_azblob",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "selectEmployee"
				},
				{
					"name": "assertEmployee"
				},
				{
					"name": "derivedTestColumns"
				},
				{
					"name": "filterErrors"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_id as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          Salary as integer,",
				"          Dept_id as integer,",
				"          Date_of_Join as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: true,",
				"     partitionBy('hash', 1)) ~> blobEmployee",
				"source(output(",
				"          Dept_Id as integer,",
				"          Dept_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqldbDepartment",
				"blobEmployee select(mapColumn(",
				"          Emp_Id = Emp_id,",
				"          Name,",
				"          Gender,",
				"          Salary,",
				"          Dept_Id = Dept_id,",
				"          Date_Joined = Date_of_Join",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectEmployee",
				"selectEmployee, sqldbDepartment assert(expectTrue(!isNull(toDate(Date_Joined, 'yyyyMMdd')), false, 'dateValidation'),",
				"     expectUnique(Emp_Id, false, 'uniqueEmpId'),",
				"     expectExists(selectEmployee@Dept_Id == sqldbDepartment@Dept_Id, false, 'existsDeptId')) ~> assertEmployee",
				"assertEmployee derive(Is_Error = isError(),",
				"          Date_Error = hasError('dateValidation')) ~> derivedTestColumns",
				"derivedTestColumns filter(Is_Error == false()) ~> filterErrors",
				"filterErrors sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Emp_Key as integer,",
				"          Emp_Id as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          Salary as integer,",
				"          Dept_Id as integer,",
				"          Updated as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sqldbEmployeeDF"
			]
		}
	}
}