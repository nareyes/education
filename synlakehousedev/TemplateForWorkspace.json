{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synlakehousedev"
		},
		"syn-dev-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syn-dev-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:syn-dev.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"synlakehousedev-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synlakehousedev-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synlakehousedev.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"synlakehousedev-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synlakehousedev.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/syn-dev-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syn-dev-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synlakehousedev-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synlakehousedev-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synlakehousedev-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synlakehousedev-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/column_subset')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Select Subset of Columns (CSV w/ Headers)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH(\n        Borough VARCHAR(15)  \n        ,Zone    VARCHAR(50) \n    ) AS TaxiZone\n\n\n-- Select Subset of Columns (CSV w/o Headers)\n-- Specify Column Ordinal Position in WITH Clause\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    )\n    WITH(\n        Borough VARCHAR(15)  2\n        ,Zone   VARCHAR(50)  3\n    ) AS TaxiZone\n\n\n-- Renaming Columns\n-- Specify Column Ordinal Position in WITH Clause\n-- Synapse Ignores Header Column (Explicit: Use FIRSTROW Instead)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- HEADER_ROW = TRUE\n        FIRSTROW = 2\n    ) \n    WITH(\n        LocationID      SMALLINT    \n        ,Borough        VARCHAR(15) \n        ,Zone           VARCHAR(50) \n        ,ServiceZone    VARCHAR(15) 4\n    ) AS TaxiZone\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- HEADER_ROW = TRUE\n        FIRSTROW = 2\n    ) \n    WITH(\n        location_id     SMALLINT    1\n        ,borough        VARCHAR(15) 2\n        ,zone           VARCHAR(50) 3   \n        ,service_zone   VARCHAR(15) 4\n    ) AS TaxiZone",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/common_table_exp')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "data_discovery"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n\n-- Identify Percentage of Cash & Credit Card Trips by Borough\nWITH\n\nCTE_PaymentType AS (\n    SELECT\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type\n        ,CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) payment_type_desc\n    FROM OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0', \n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    )\n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS payment_type\n),\n\nCTE_TaxiZone AS (\n    SELECT\n        *\n    FROM\n        OPENROWSET(\n            BULK 'taxi_zone.csv',\n            DATA_SOURCE = 'NYC_Taxi_Raw',\n            FORMAT = 'CSV',\n            PARSER_VERSION = '2.0',\n            FIRSTROW = 2,\n            FIELDTERMINATOR = ',',\n            ROWTERMINATOR = '\\n'\n        ) \n        WITH (\n            location_id SMALLINT        1\n            ,borough VARCHAR(15)         2\n            ,zone VARCHAR(50)            3\n            ,service_zone VARCHAR(15)    4\n        ) AS TaxiZone\n),\n\nCTE_TripData AS (\n    SELECT\n        *\n    FROM\n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=*/month=*/**',\n            FORMAT = 'PARQUET',\n            DATA_SOURCE = 'NYC_Taxi_Raw'\n        ) AS TripData\n)\n\nSELECT \n    CTE_TaxiZone.borough AS Borough\n    ,COUNT(1) AS TotalTrips\n    ,SUM(CASE WHEN CTE_PaymentType.payment_type_desc = 'Cash' THEN 1 ELSE 0 END) AS CashTrips\n    ,SUM(CASE WHEN CTE_PaymentType.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END) AS CardTrips\n    ,CAST((SUM(CASE WHEN CTE_PaymentType.payment_type_desc = 'Cash' THEN 1 ELSE 0 END)/ CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5, 2)) AS CashTripsPercentage\n    ,CAST((SUM(CASE WHEN CTE_PaymentType.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END)/ CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5, 2)) AS CardTripsPercentage\nFROM CTE_TripData \n    LEFT JOIN CTE_PaymentType\n        ON (CTE_TripData.payment_type = CTE_PaymentType.payment_type)\n    LEFT JOIN CTE_TaxiZone\n        ON (CTE_TripData.PULocationId = CTE_TaxiZone.location_id)\nWHERE CTE_PaymentType.payment_type_desc IN ('Cash', 'Credit card')\nGROUP BY CTE_TaxiZone.borough\nORDER BY CTE_TaxiZone.borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "admin"
				},
				"content": {
					"query": "-- Data Processed\nSELECT * FROM sys.dm_external_data_processed;\n\n-- Current Cost Control Settings\nSELECT * FROM sys.configurations\nWHERE Name LIKE 'Data Processed%';\n\n-- Set Cost Control Limits\nsp_set_data_processed_limit\n    @type = N'monthly',\n    @limit_tb = 2;\n\nsp_set_data_processed_limit\n    @type = N'weekly',\n    @limit_tb = 1;\n\nsp_set_data_processed_limit\n    @type = N'daily',\n    @limit_tb = 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_calendar_csv_processed')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless/create_external_tables_processed"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Data Written to ADLS Cannot be Deleted Here\n-- Delete via Pipelines and Call Script as a Best Practice\n\n-- Calendar\nIF OBJECT_ID ('Processed.Calendar') IS NOT NULL\n    DROP EXTERNAL TABLE Processed.Calendar\n    GO\n\nCREATE EXTERNAL TABLE Processed.Calendar\n\n    WITH (\n        LOCATION = 'calendar'\n        ,DATA_SOURCE = NYC_Taxi_Processed\n        ,FILE_FORMAT = Parquet_File_Format\n    )\n\nAS\n\n    -- SELECT *\n    -- FROM Raw.Calendar;\n\n    -- Alternate: Use OPENROWSET if Raw Table Does Not Exists\n    -- Preferred Method, Simple Column Renaming\n    SELECT\n        *\n    FROM\n        OPENROWSET (\n            BULK 'calendar.csv'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV'\n            ,PARSER_VERSION = '2.0'\n            ,FIRSTROW = 2\n        )\n\n        WITH (\n            DateKey         INT         1\n            ,Date           DATE        2\n            ,Year           SMALLINT    3\n            ,Month          TINYINT     4\n            ,Day            TINYINT     5\n            ,DayName        VARCHAR(10) 6\n            ,DayOfYear      SMALLINT    7\n            ,WeekOfMonth    TINYINT     8\n            ,WeekOfYear     TINYINT     9\n            ,MonthName      VARCHAR(10) 10\n            ,YearMonth      INT         11\n            ,YearWeek       INT         12\n        ) AS Calendar\n\n\n-- Query Processed Table\n-- SELECT TOP 10 * FROM Processed.Calendar;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_database_schema')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless"
				},
				"content": {
					"query": "Use MASTER\nGO\n\n-- Create & Alter Database\nCREATE DATABASE NYC_Taxi_Serverless\nGO\n\nALTER DATABASE NYC_Taxi_Serverless\nCOLLATE Latin1_General_100_BIN2_UTF8\nGO\n\n\nUSE NYC_Taxi_Serverless\nGO\n\n-- Create Schemas\nCREATE SCHEMA Raw\nGO\n\nCREATE SCHEMA Processed\nGO\n\nCREATE SCHEMA Curated\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_external_data_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n/* Template\nCREATE EXTERNAL DATA SOURCE NYC_Taxi_File_Drop\nWITH(\n    LOCATION = <file_path>,\n    CREDENTIAL = <credential_name>,\n    TYPE = {HADOOP}\n)\n\nCredential and Type Are Optional Arguments\nType = Hadoop Only Supported w/ Dedicated SQL Pools\n*/\n\n-- Create External Data Source\n-- Navigate: Data > Database > External Resources\n-- Using HTTPS or ABFSS Protocol (Container Properties for URL)\nCREATE EXTERNAL DATA SOURCE NYC_Taxi_File_Drop\nWITH (\n    LOCATION = 'https://synlakehousedev.dfs.core.windows.net/file-drop/'\n)\n\nCREATE EXTERNAL DATA SOURCE NYC_Taxi_File_Drop_HTTPS\nWITH (\n    LOCATION = 'https://synlakehousedev.dfs.core.windows.net/file-drop/'\n)\n\nCREATE EXTERNAL DATA SOURCE NYC_Taxi_File_Drop_ABFSS\nWITH (\n    LOCATION = 'abfss://file-drop@synlakehousedev.dfs.core.windows.net/'\n)\n\n\n/*\nBenefits: Cleans queries and makes it easier for developers to query data lake.\nAbility to create reusable sources that point to different zones in the lakehouse.\n*/\nIF NOT EXISTS (\n    SELECT name FROM sys.external_data_sources \n    WHERE name = 'NYC_Taxi_Raw'\n)\n\n    CREATE EXTERNAL DATA SOURCE NYC_Taxi_Raw\n    WITH (\n        LOCATION = 'https://synlakehousedev.dfs.core.windows.net/nyc-taxi/raw'\n    );\n\n\nIF NOT EXISTS (\n    SELECT name FROM sys.external_data_sources \n    WHERE name = 'NYC_Taxi_Processed'\n)\n\n    CREATE EXTERNAL DATA SOURCE NYC_Taxi_Processed\n    WITH (\n        LOCATION = 'https://synlakehousedev.dfs.core.windows.net/nyc-taxi/processed'\n    );\n\n\nIF NOT EXISTS (\n    SELECT name FROM sys.external_data_sources \n    WHERE name = 'NYC_Taxi_Curated'\n)\n\n    CREATE EXTERNAL DATA SOURCE NYC_Taxi_Curated\n    WITH (\n        LOCATION = 'https://synlakehousedev.dfs.core.windows.net/nyc-taxi/curated'\n    );\n\n\n-- Examine Data Sources\nSELECT \n    name \n    ,location\nFROM sys.external_data_sources;\n\n\n-- Drop Data Source\nDROP EXTERNAL DATA SOURCE NYC_Taxi_File_Drop\nGO\n\n\nDROP EXTERNAL DATA SOURCE NYC_Taxi_File_Drop_HTTPS\nGO\n\n\n-- Drop Data Source (IF EXISTS)\nIF EXISTS (\n    SELECT name FROM sys.external_data_sources \n    WHERE name = 'NYC_Taxi_Curated'\n)\nBEGIN\n    DROP EXTERNAL DATA SOURCE NYC_Taxi_Curated\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- CSV\nIF NOT EXISTS (\n    SELECT * FROM sys.external_file_formats\n    WHERE Name = 'CSV_File_Format'\n)\n\n    CREATE EXTERNAL FILE FORMAT CSV_File_Format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT\n        ,FORMAT_OPTIONS (\n            FIELD_TERMINATOR = ','\n            ,STRING_DELIMITER = '\"'\n            ,FIRST_ROW = 2\n            ,USE_TYPE_DEFAULT = FALSE -- True Replaces NULLs w/ Default Values\n            ,ENCODING = 'UTF8'\n            ,PARSER_VERSION = '2.0'\n        )\n    );\n\n\n-- TSV\nIF NOT EXISTS (\n    SELECT * FROM sys.external_file_formats\n    WHERE Name = 'TSV_File_Format'\n)\n\n    CREATE EXTERNAL FILE FORMAT TSV_File_Format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT\n        ,FORMAT_OPTIONS (\n            FIELD_TERMINATOR = '\\t'\n            ,STRING_DELIMITER = '\"'\n            ,FIRST_ROW = 2\n            ,USE_TYPE_DEFAULT = FALSE -- True Replaces NULLs w/ Default Values\n            ,ENCODING = 'UTF8'\n            ,PARSER_VERSION = '2.0'\n        )\n    );\n\n\n-- PARQUET\nIF NOT EXISTS (\n    SELECT * FROM sys.external_file_formats\n    WHERE Name = 'Parquet_File_Format'\n)\n\n    CREATE EXTERNAL FILE FORMAT Parquet_File_Format\n    WITH (\n        FORMAT_TYPE = PARQUET\n        ,DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    );\n\n\n-- DELTA\nIF NOT EXISTS (\n    SELECT * FROM sys.external_file_formats\n    WHERE Name = 'Delta_File_Format'\n)\n\n    CREATE EXTERNAL FILE FORMAT Delta_File_Format\n    WITH (\n        FORMAT_TYPE = DELTA\n        ,DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_external_tables_raw')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Calendar\nIF OBJECT_ID ('Raw.Calendar') IS NOT NULL\n    DROP EXTERNAL TABLE Raw.Calendar\n    GO\n\nCREATE EXTERNAL TABLE Raw.Calendar (\n    DateKey         INT         \n    ,Date           DATE        \n    ,Year           SMALLINT    \n    ,Month          TINYINT     \n    ,Day            TINYINT     \n    ,DayName        VARCHAR(10) \n    ,DayOfYear      SMALLINT    \n    ,WeekOfMonth    TINYINT     \n    ,WeekOfYear     TINYINT     \n    ,MonthName      VARCHAR(10) \n    ,YearMonth      INT         \n    ,YearWeek       INT         \n)\n\n    WITH (\n        LOCATION = 'calendar.csv'\n        ,DATA_SOURCE = NYC_Taxi_Raw\n        ,FILE_FORMAT = CSV_File_Format\n        ,REJECT_VALUE = 10\n        ,REJECTED_ROW_LOCATION = 'rejections/calendar'\n    );\n\nSELECT * FROM Raw.Calendar;\n\n\n-- Taxi Zone\nIF OBJECT_ID ('Raw.TaxiZone') IS NOT NULL\n    DROP EXTERNAL TABLE Raw.TaxiZone\n    GO\n\nCREATE EXTERNAL TABLE Raw.TaxiZone (\n    LocationID      SMALLINT\n    ,Borough        VARCHAR(15)\n    ,Zone           VARCHAR(50)\n    ,ServiceZone    VARCHAR(15)\n)\n\n    WITH (\n        LOCATION = 'taxi_zone.csv'\n        ,DATA_SOURCE = NYC_Taxi_Raw\n        ,FILE_FORMAT = CSV_File_Format\n        ,REJECT_VALUE = 10\n        ,REJECTED_ROW_LOCATION = 'rejections/taxi_zone'\n    );\n\nSELECT * FROM Raw.TaxiZone;\n\n\n-- Trip Type\nIF OBJECT_ID ('Raw.TripType') IS NOT NULL\n    DROP EXTERNAL TABLE Raw.TripType\n    GO\n\nCREATE EXTERNAL TABLE Raw.TripType (\n    TripType                SMALLINT\n    ,TripTypeDescription    VARCHAR(25)\n)\n\n    WITH (\n        LOCATION = 'trip_type.tsv'\n        ,DATA_SOURCE = NYC_Taxi_Raw\n        ,FILE_FORMAT = TSV_File_Format\n        ,REJECT_VALUE = 10\n        ,REJECTED_ROW_LOCATION = 'rejections/trip_type'\n    );\n\nSELECT * FROM Raw.TripType;\n\n\n-- Vendor\nIF OBJECT_ID ('Raw.Vendor') IS NOT NULL\n    DROP EXTERNAL TABLE Raw.Vendor\n    GO\n\nCREATE EXTERNAL TABLE Raw.Vendor (\n    VendorID    SMALLINT\n    ,VendorName VARCHAR(35)\n)\n\n    WITH (\n        LOCATION = 'vendor.csv'\n        ,DATA_SOURCE = NYC_Taxi_Raw\n        ,FILE_FORMAT = CSV_File_Format\n        ,REJECT_VALUE = 10\n        ,REJECTED_ROW_LOCATION = 'rejections/trip_type'\n    );\n\nSELECT * FROM Raw.Vendor;\n\n\n-- Trip Data CSV\n-- External Tables Do Not Support Partition Pruning\nIF OBJECT_ID ('Raw.TripCSV') IS NOT NULL\n    DROP EXTERNAL TABLE Raw.TripCSV\n    GO\n\nCREATE EXTERNAL TABLE Raw.TripCSV (\n    VendorID\t            TINYINT\n    ,PickupDateTime\t        DATETIME2(0)\n    ,DropoffDateTime\t    DATETIME2(0)\n    ,StoreAndFwdFlag\t    VARCHAR(10)\n    ,RateCodeID\t            SMALLINT\n    ,PULocationID\t        SMALLINT\n    ,DOLocationID\t        SMALLINT\n    ,PassengerCount\t        TINYINT\n    ,TripDistance\t        FLOAT\n    ,FareAmount\t            FLOAT\n    ,Extra\t                FLOAT\n    ,MTATax\t                FLOAT\n    ,TipAmount\t            FLOAT\n    ,TollsAmount\t        FLOAT\n    ,EhailFee\t            VARCHAR(50)\n    ,ImprovementSurcharge   FLOAT\n    ,TotalAmount\t        FLOAT\n    ,PaymentType\t        BIGINT\n    ,TripType               BIGINT\n    ,CongestionSurcharge    FLOAT\n)\n\n    WITH (\n        LOCATION = 'trip_data_green_csv/**'\n        ,DATA_SOURCE = NYC_Taxi_Raw\n        ,FILE_FORMAT = CSV_File_Format\n        ,REJECT_VALUE = 10\n        ,REJECTED_ROW_LOCATION = 'rejections/trip_csv'\n    );\n\nSELECT TOP 100 * FROM Raw.TripCSV;\n\n\n-- Trip Data Parquet (Column Names Need to Match Source)\n-- External Tables Do Not Support Partition Pruning\nIF OBJECT_ID ('Raw.TripParquet') IS NOT NULL\n    DROP EXTERNAL TABLE Raw.TripParquet\n    GO\n\nCREATE EXTERNAL TABLE Raw.TripParquet (\n    VendorID\t            TINYINT\n    ,lpep_pickup_datetime\tDATETIME2(0)\n    ,lpep_dropoff_datetime\tDATETIME2(0)\n    ,store_and_fwd_flag\t    VARCHAR(10)\n    ,RatecodeID\t            SMALLINT\n    ,PULocationID\t        SMALLINT\n    ,DOLocationID\t        SMALLINT\n    ,passenger_count\t    TINYINT\n    ,trip_distance\t        FLOAT\n    ,fare_amount\t        FLOAT\n    ,extra\t                FLOAT\n    ,mta_tax\t            FLOAT\n    ,tip_amount\t            FLOAT\n    ,tolls_amount\t        FLOAT\n    ,ehail_fee\t            VARCHAR(50)\n    ,improvement_surcharge  FLOAT\n    ,total_amount\t        FLOAT\n    ,payment_type\t        BIGINT\n    ,trip_type              BIGINT\n    ,congestion_surcharge   FLOAT\n)\n\n    WITH (\n        LOCATION = 'trip_data_green_parquet/**'\n        ,DATA_SOURCE = NYC_Taxi_Raw\n        ,FILE_FORMAT = Parquet_File_Format\n        ,REJECT_VALUE = 10\n        ,REJECTED_ROW_LOCATION = 'rejections/trip_parquet'\n    );\n\nSELECT TOP 100 * FROM Raw.TripParquet;\n\n\n-- Trip Data Delta (Column Names Need to Match Source)\n-- External Tables Do Not Support Partition Pruning\nIF OBJECT_ID ('Raw.TripDelta') IS NOT NULL\n    DROP EXTERNAL TABLE Raw.TripDelta\n    GO\n\nCREATE EXTERNAL TABLE Raw.TripDelta (\n    VendorID\t            TINYINT\n    ,lpep_pickup_datetime\tDATETIME2(0)\n    ,lpep_dropoff_datetime\tDATETIME2(0)\n    ,store_and_fwd_flag\t    VARCHAR(10)\n    ,RatecodeID\t            SMALLINT\n    ,PULocationID\t        SMALLINT\n    ,DOLocationID\t        SMALLINT\n    ,passenger_count\t    TINYINT\n    ,trip_distance\t        FLOAT\n    ,fare_amount\t        FLOAT\n    ,extra\t                FLOAT\n    ,mta_tax\t            FLOAT\n    ,tip_amount\t            FLOAT\n    ,tolls_amount\t        FLOAT\n    ,ehail_fee\t            VARCHAR(50)\n    ,improvement_surcharge  FLOAT\n    ,total_amount\t        FLOAT\n    ,payment_type\t        BIGINT\n    ,trip_type              BIGINT\n    ,congestion_surcharge   FLOAT\n)\n\n    WITH (\n        LOCATION = 'trip_data_green_delta'\n        ,DATA_SOURCE = NYC_Taxi_Raw\n        ,FILE_FORMAT = Delta_File_Format\n        -- Reject Value Not Supported\n        -- ,REJECT_VALUE = 10\n        -- ,REJECTED_ROW_LOCATION = 'rejections/trip_delta'\n    );\n\nSELECT TOP 100 * FROM Raw.TripDelta;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_payment_type_json_processed')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless/create_external_tables_processed"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Data Written to ADLS Cannot be Deleted Here\n-- Delete via Pipelines and Call Script as a Best Practice\n\n-- Taxi Zone\nIF OBJECT_ID ('Processed.PaymentType') IS NOT NULL\n    DROP EXTERNAL TABLE Processed.PaymentType\n    GO\n\nCREATE EXTERNAL TABLE Processed.PaymentType\n\n    WITH (\n        LOCATION = 'payment_type'\n        ,DATA_SOURCE = NYC_Taxi_Processed\n        ,FILE_FORMAT = Parquet_File_Format\n    )\n\nAS\n\n    -- SELECT *\n    -- FROM Raw.View_RateCode;\n\n    -- Alternate: Use OPENROWSET if Raw Table Does Not Exists\n    -- Preferred Method, Simple Column Renaming\n    SELECT\n        PaymentType\n        ,PaymentTypeDescription\n    FROM\n        OPENROWSET (\n            BULK 'payment_type.json'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV' -- Even for JSON\n            ,PARSER_VERSION = '1.0'\n            ,FIELDTERMINATOR = '0x0b'\n            ,FIELDQUOTE = '0x0b'\n            ,ROWTERMINATOR = '0x0a'\n        ) \n\n            WITH (\n                jsonDoc NVARCHAR(MAX)\n            ) AS PaymentType\n\n    CROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n        WITH (\n            PaymentType             SMALLINT    '$.payment_type'\n            ,PaymentTypeDescription VARCHAR(15) '$.payment_type_desc'\n        )\n\n\n-- Query Processed Table\n-- SELECT TOP 10 * FROM Processed.PaymentType;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_rate_code_json_processed')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless/create_external_tables_processed"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Data Written to ADLS Cannot be Deleted Here\n-- Delete via Pipelines and Call Script as a Best Practice\n\n-- Taxi Zone\nIF OBJECT_ID ('Processed.RateCode') IS NOT NULL\n    DROP EXTERNAL TABLE Processed.RateCode\n    GO\n\nCREATE EXTERNAL TABLE Processed.RateCode\n\n    WITH (\n        LOCATION = 'rate_code'\n        ,DATA_SOURCE = NYC_Taxi_Processed\n        ,FILE_FORMAT = Parquet_File_Format\n    )\n\nAS\n\n    -- SELECT *\n    -- FROM Raw.View_RateCode;\n\n    -- Alternate: Use OPENROWSET if Raw Table Does Not Exists\n    -- Preferred Method, Simple Column Renaming\n    SELECT\n        RateCodeID\n        ,RateCodeDescription\n    FROM\n        OPENROWSET (\n            BULK 'rate_code.json'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV' -- Even for JSON\n            ,PARSER_VERSION = '1.0'\n            ,FIELDTERMINATOR = '0x0b'\n            ,FIELDQUOTE = '0x0b'\n            ,ROWTERMINATOR = '0x0b' -- Vertical Tab\n        ) \n\n            WITH (\n                jsonDoc NVARCHAR(MAX)\n            ) AS RateCode\n\n    CROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n        WITH (\n            RateCodeID              TINYINT     '$.rate_code_id'\n            ,RateCodeDescription    VARCHAR(20) '$.rate_code'\n        )\n\n\n-- Query Processed Table\n-- SELECT TOP 10 * FROM Processed.RateCode;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_taxi_zone_csv_processed')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless/create_external_tables_processed"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Data Written to ADLS Cannot be Deleted Here\n-- Delete via Pipelines and Call Script as a Best Practice\n\n-- Taxi Zone\nIF OBJECT_ID ('Processed.TaxiZone') IS NOT NULL\n    DROP EXTERNAL TABLE Processed.TaxiZone\n    GO\n\nCREATE EXTERNAL TABLE Processed.TaxiZone\n\n    WITH (\n        LOCATION = 'taxi_zone'\n        ,DATA_SOURCE = NYC_Taxi_Processed\n        ,FILE_FORMAT = Parquet_File_Format\n    )\n\nAS\n\n    -- SELECT *\n    -- FROM Raw.TaxiZone;\n\n    -- Alternate: Use OPENROWSET if Raw Table Does Not Exists\n    -- Preferred Method, Simple Column Renaming\n    SELECT\n        *\n    FROM\n        OPENROWSET (\n            BULK 'taxi_zone.csv'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV'\n            ,PARSER_VERSION = '2.0'\n            ,HEADER_ROW = TRUE\n        )\n\n        WITH (\n            LocationID      SMALLINT    1\n            ,Borough        VARCHAR(15) 2\n            ,Zone           VARCHAR(50) 3\n            ,ServiceZone    VARCHAR(15) 4\n        ) AS TaxiZone\n\n\n-- Query Processed Table\n-- SELECT TOP 10 * FROM Processed.TaxiZone;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_trip_type_csv_processed')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless/create_external_tables_processed"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Data Written to ADLS Cannot be Deleted Here\n-- Delete via Pipelines and Call Script as a Best Practice\n\n-- Taxi Zone\nIF OBJECT_ID ('Processed.TripType') IS NOT NULL\n    DROP EXTERNAL TABLE Processed.TripType\n    GO\n\nCREATE EXTERNAL TABLE Processed.TripType\n\n    WITH (\n        LOCATION = 'trip_type'\n        ,DATA_SOURCE = NYC_Taxi_Processed\n        ,FILE_FORMAT = Parquet_File_Format\n    )\n\nAS\n\n    -- SELECT *\n    -- FROM Raw.TripType;\n\n    -- Alternate: Use OPENROWSET if Raw Table Does Not Exists\n    -- Preferred Method, Simple Column Renaming\n    SELECT\n        *\n    FROM\n        OPENROWSET (\n            BULK 'trip_type.tsv'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV'\n            ,FIELDTERMINATOR = '\\t'\n            ,PARSER_VERSION = '2.0'\n            ,HEADER_ROW = TRUE\n        )\n\n        WITH (\n            TripType                SMALLINT    1\n            ,TripTypeDescription    VARCHAR(25) 2\n        ) AS TripType\n\n\n-- Query Processed Table\n-- SELECT TOP 10 * FROM Processed.TripType;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_vendor_csv_processed')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless/create_external_tables_processed"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Data Written to ADLS Cannot be Deleted Here\n-- Delete via Pipelines and Call Script as a Best Practice\n\n-- Taxi Zone\nIF OBJECT_ID ('Processed.Vendor') IS NOT NULL\n    DROP EXTERNAL TABLE Processed.Vendor\n    GO\n\nCREATE EXTERNAL TABLE Processed.Vendor\n\n    WITH (\n        LOCATION = 'vendor'\n        ,DATA_SOURCE = NYC_Taxi_Processed\n        ,FILE_FORMAT = Parquet_File_Format\n    )\n\nAS\n\n    -- SELECT *\n    -- FROM Raw.Vendor;\n\n    -- Alternate: Use OPENROWSET if Raw Table Does Not Exists\n    -- Preferred Method, Simple Column Renaming\n    SELECT\n        *\n    FROM\n        OPENROWSET(\n            BULK 'vendor.csv'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV'\n            ,PARSER_VERSION = '2.0'\n            ,HEADER_ROW = TRUE\n        )\n\n        WITH (\n            VendorID    SMALLINT    1\n            ,VendorName VARCHAR(50) 2\n        ) AS Vendor\n\n\n-- Query Processed Table\n-- SELECT TOP 10 * FROM Processed.Vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_views_raw')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dw_serverless"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Rate Code (JSON Source)\nDROP VIEW IF EXISTS Raw.View_RateCode\nGO\n\nCREATE VIEW Raw.View_RateCode\nAS\n    SELECT\n        RateCodeID\n        ,RateCodeDescription\n    FROM\n        OPENROWSET (\n            BULK 'rate_code.json',\n            DATA_SOURCE = 'NYC_Taxi_Raw',\n            FORMAT = 'CSV', -- Even for JSON\n            PARSER_VERSION = '1.0',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b' -- Vertical Tab\n        ) \n\n            WITH (\n                jsonDoc NVARCHAR(MAX)\n            ) AS RateCode\n\n    CROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n        WITH (\n            RateCodeID              TINYINT     '$.rate_code_id'\n            ,RateCodeDescription    VARCHAR(20) '$.rate_code'\n        );\nGO\n\nSELECT * FROM Raw.View_RateCode;\nGO\n\n\n-- Payment Type\nDROP VIEW IF EXISTS Raw.View_PaymentType\nGO\n\nCREATE VIEW Raw.View_PaymentType\nAS\n    SELECT\n        PaymentType\n        ,PaymentTypeDescription\n    FROM\n        OPENROWSET (\n            BULK 'payment_type.json'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV' -- Even for JSON\n            ,PARSER_VERSION = '1.0'\n            ,FIELDTERMINATOR = '0x0b'\n            ,FIELDQUOTE = '0x0b'\n            ,ROWTERMINATOR = '0x0a'\n        ) \n\n            WITH (\n                jsonDoc NVARCHAR(MAX)\n            ) AS PaymentType\n\n    CROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n        WITH (\n            PaymentType             SMALLINT    '$.payment_type'\n            ,PaymentTypeDescription VARCHAR(15) '$.payment_type_desc'\n        )\nGO\n\nSELECT * FROM Raw.View_PaymentType;\nGO\n\n\n-- Partition Pruning for Views (Workaround for External Table Pruning)\n-- External Tables Do Not Support Partition Pruning\nDROP VIEW IF EXISTS Raw.View_TripCSV\nGO\n\nCREATE VIEW Raw.View_TripCSV\nAS\n    SELECT\n        TripCSV.filepath(1) AS PartitionYear\n        ,TripCSV.filepath(2) AS PartitionMonth\n        ,TripCSV.*\n    FROM\n        OPENROWSET (\n            BULK 'trip_data_green_csv/year=*/month=*/*.csv'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV'\n            ,PARSER_VERSION = '2.0'\n            ,HEADER_ROW = TRUE\n        )\n\n            WITH (\n                VendorID\t            TINYINT\n                ,lpep_pickup_datetime\tDATETIME2(0)\n                ,lpep_dropoff_datetime\tDATETIME2(0)\n                ,store_and_fwd_flag\t    VARCHAR(10)\n                ,RatecodeID\t            SMALLINT\n                ,PULocationID\t        SMALLINT\n                ,DOLocationID\t        SMALLINT\n                ,passenger_count\t    TINYINT\n                ,trip_distance\t        FLOAT\n                ,fare_amount\t        FLOAT\n                ,extra\t                FLOAT\n                ,mta_tax\t            FLOAT\n                ,tip_amount\t            FLOAT\n                ,tolls_amount\t        FLOAT\n                ,ehail_fee\t            VARCHAR(50)\n                ,improvement_surcharge  FLOAT\n                ,total_amount\t        FLOAT\n                ,payment_type\t        BIGINT\n                ,trip_type              BIGINT\n                ,congestion_surcharge   FLOAT\n            ) AS TripCSV\nGO\n\nSELECT TOP 10 * FROM Raw.View_TripCSV;\n\nSELECT\n    PartitionYear\n    ,PartitionMonth\n    ,COUNT(1) AS RecordCount\nFROM Raw.View_TripCSV\nWHERE PartitionYear = 2020\nGROUP BY PartitionYear,PartitionMonth\nORDER BY PartitionMonth;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/debug_error')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Generate Error\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- HEADER_ROW = TRUE\n        FIRSTROW = 2\n    ) \n    WITH(\n        LocationID      SMALLINT    \n        ,Borough        VARCHAR(15) \n        ,Zone           VARCHAR(5) -- Incorrect Data Size\n        ,ServiceZone    VARCHAR(15)\n    ) AS TaxiZone\n\n\n-- Update Parser Version (Returns Explicit Error)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0', -- Changed From 2.0\n        -- HEADER_ROW = TRUE\n        FIRSTROW = 2\n    ) \n    WITH(\n        LocationID      SMALLINT    \n        ,Borough        VARCHAR(15) \n        ,Zone           VARCHAR(5) -- Incorrect Data Size\n        ,ServiceZone    VARCHAR(15)\n    ) AS TaxiZone",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/identify_counts')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "data_discovery"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n\n-- Explore\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIRSTROW = 2\n    ) \n    WITH(\n        location_id     SMALLINT    1\n        ,borough        VARCHAR(15) 2\n        ,zone           VARCHAR(50) 3   \n        ,service_zone   VARCHAR(15) 4\n    ) AS TaxiZone\n\n\n-- Check for Duplicate LocationIDs\nSELECT\n    location_id\n    ,COUNT(1) AS location_id_count \nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIRSTROW = 2\n    ) \n    WITH(\n        location_id     SMALLINT    1\n        ,borough        VARCHAR(15) 2\n        ,zone           VARCHAR(50) 3   \n        ,service_zone   VARCHAR(15) 4\n    ) AS TaxiZone\nGROUP BY location_id\nHAVING COUNT (1) > 1\nORDER BY location_id ASC;\n\n\n-- Check Record Count Per Borough\nSELECT\n    borough\n    ,COUNT(1) AS borough_count \nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIRSTROW = 2\n    ) \n    WITH(\n        location_id     SMALLINT    1\n        ,borough        VARCHAR(15) 2\n        ,zone           VARCHAR(50) 3   \n        ,service_zone   VARCHAR(15) 4\n    ) AS TaxiZone\nGROUP BY borough\nORDER BY borough ASC;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/joining_files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "data_discovery"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Explore Files to Join\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH(\n        location_id     SMALLINT    1\n        ,borough        VARCHAR(15) 2\n        ,zone           VARCHAR(50) 3   \n        ,service_zone   VARCHAR(15) 4\n    ) AS TaxiZone\n\n\n-- Identify NULL PULocationID (No Records)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\nWHERE PULocationID IS NULL;\n\n\n-- Join Files\nSELECT\n    TaxiZone.Borough\n    ,COUNT(1) AS TripCount\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\nINNER JOIN\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )\n    WITH(\n        LocationID      SMALLINT    1\n        ,Borough        VARCHAR(15) 2\n        ,Zone           VARCHAR(50) 3   \n        ,ServiceZone    VARCHAR(15) 4\n    ) AS TaxiZone\n\n    ON TripData.PULocationID = TaxiZone.LocationID\n\nGROUP BY TaxiZone.Borough\nORDER BY TaxiZone.Borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/json_value_function')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_json"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query JSON Values\nSELECT\n    JSON_VALUE (jsonDoc, '$.payment_type') AS PaymentType\n    ,JSON_VALUE (jsonDoc, '$.payment_type_desc') AS PaymentTypeDescription\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS PaymentType\n\n\n-- Query JSON Values w/ Data Type\nSELECT\n    CAST (JSON_VALUE (jsonDoc, '$.payment_type') AS SMALLINT) AS PaymentType\n    ,CAST (JSON_VALUE (jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) AS PaymentTypeDescription\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS PaymentType",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/kill_session')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "admin"
				},
				"content": {
					"query": "-- Query Session ID\nSELECT DB_NAME(database_id), 'kill '+ CAST(session_id AS VARCHAR(10)), *\n    FROM sys.dm_exec_sessions\n    WHERE DB_NAME(database_id) NOT IN ('master')\n    ORDER BY 1;\n\n\n-- Kill Session ID\nKILL <session_id>;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/openjson_function')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_json"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query JSON Values w/ OPENJSON\n-- OPENJSON = More Efficient, More Functionality\nSELECT\n    PaymentType\n    ,PaymentTypeDescription\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS PaymentType\n\nCROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n    WITH(\n        PaymentType             SMALLINT    '$.payment_type'\n        ,PaymentTypeDescription VARCHAR(15) '$.payment_type_desc'\n    )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/openrowset_function')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "-- OPENROWSET\n-- Use HTTPS or ABFSS Protocol\n\n-- HTTPS\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',', -- Default = ,\n        ROWTERMINATOR = '\\n' -- Default = \\n\n    ) AS TaxiZone\n\n\n-- ABFSS\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://file-drop@synlakehousedev.dfs.core.windows.net/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS TaxiZone",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "data_discovery"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Explore\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\n\n-- Check TotalAmount Statistics\nSELECT\n    MIN (total_amount)      AS min_total_amount -- Unexpected MIN Value\n    ,MAX (total_amount)     AS max_total_amount\n    ,AVG (total_amount)     AS avg_total_amount\n    ,COUNT(1)               AS record_count\n    ,COUNT(total_amount)    AS record_count_not_null\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\n\n-- Check Negative TotalAmount Values\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\nWHERE total_amount < 0;\n\n\n-- Check PaymentType Counts for Negative TotalAmount Values\nSELECT\n    payment_type -- Outliers: 3 & 4\n    ,COUNT(1) AS payment_type_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\nWHERE total_amount < 0\nGROUP BY payment_type\nORDER BY payment_type ASC;\n\n\n-- Check Payment Type Descriptions (Interested in 3 and 4)\n-- Payment Type Descriptions: 3 = No Charge, 4 = Dispute\nSELECT\n    JSON_VALUE (jsonDoc, '$.payment_type') AS PaymentType\n    ,JSON_VALUE (jsonDoc, '$.payment_type_desc') AS PaymentTypeDescription\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS PaymentType\n\n\n-- Check Percentage of Payment Type\nSELECT\n    payment_type\n    ,COUNT(1) AS payment_type_count\n    ,COUNT(1) * 100.0 / total_count AS payment_type_percentage\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\nCROSS JOIN(\n        SELECT COUNT(1) AS total_count\n        FROM OPENROWSET(\n            BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n            DATA_SOURCE = 'NYC_Taxi_Raw',\n            FORMAT = 'PARQUET'\n        ) AS TripData\n    ) AS TotalCount\nGROUP BY payment_type, total_count\nORDER BY payment_type ASC;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_calendar_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query Calendar CSV File\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS Calendar\n\n\n-- Query Calendar Data Types\nEXEC sp_describe_first_result_set N'\n    SELECT\n        TOP 100 *\n    FROM\n        OPENROWSET(\n            BULK ''calendar.csv'',\n            DATA_SOURCE = ''NYC_Taxi_Raw'',\n            FORMAT = ''CSV'',\n            PARSER_VERSION = ''2.0'',\n            HEADER_ROW = TRUE\n        ) AS Calendar\n'\n\n\n-- Query Calendar CSV File w/ Optimizaed Data Types and Size\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2\n    ) \n    WITH(\n        DateKey         INT         1\n        ,Date           DATE        2\n        ,Year           SMALLINT    3\n        ,Month          TINYINT     4\n        ,Day            TINYINT     5\n        ,DayName        VARCHAR(10) 6\n        ,DayOfYear      SMALLINT    7\n        ,WeekOfMonth    TINYINT     8\n        ,WeekOfYear     TINYINT     9\n        ,MonthName      VARCHAR(10) 10\n        ,YearMonth      INT         11\n        ,YearWeek       INT         12\n    ) AS Calendar",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_columnar"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query Delta Sub-Folder\n-- Will Fail, Delta Does Not Support\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/year=2020/',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'DELTA'\n    ) AS TripData\n\n\n-- Query Delta Folder\n-- Includes Partition Metadata Columns (Used for Filtering)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'DELTA'\n    ) AS TripData\n\n\n-- Query Data Types\nEXEC sp_describe_first_result_set N'\n    SELECT\n        TOP 100 *\n    FROM\n        OPENROWSET(\n            BULK ''trip_data_green_delta/'',\n            DATA_SOURCE = ''NYC_Taxi_Raw'',\n            FORMAT = ''DELTA''\n        ) AS TripData\n'\n\n\n-- Query Delta Folders w/ Explicit Data Types\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'DELTA'\n    ) \n    WITH(\n        VendorID                INT\n        ,lpep_pickup_datetime   DATETIME2(7)\n        ,lpep_dropoff_datetime  DATETIME2(7)\n        ,passenger_count        INT\n        ,trip_distance          FLOAT\n        ,total_amount           FLOAT\n        ,trip_type              INT\n        ,year                   VARCHAR(4)\n        ,month                  VARCHAR(2)\n    ) AS TripData\n\n\n-- Target Specified Partitions w/ Metadata Columns\nSELECT\n    passenger_count\n    ,COUNT(1) AS trip_count\n    ,AVG(total_amount) AS avg_trip_cost\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'DELTA'\n    ) \n    WITH(\n        passenger_count        INT\n        ,trip_distance          FLOAT\n        ,total_amount           FLOAT\n        ,year                   VARCHAR(4)\n        ,month                  VARCHAR(2)\n    ) AS TripData\nWHERE 1=1\n    AND year = '2020'\n    AND month = '01'\nGROUP BY passenger_count\nORDER BY passenger_count ASC;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_file_metadata')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_folders"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- FILENAME Function\nSELECT\n    TripData.filename() AS file_name\n    ,COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv', -- ** All Folders and Sub-Folders\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData\nGROUP BY TripData.filename()\nORDER BY file_name ASC;\n\n\n-- FILENAME Function w/ WHERE Clause\nSELECT\n    TripData.filename() AS file_name\n    ,COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv', -- ** All Folders and Sub-Folders\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData\nWHERE TripData.filename() IN ('green_tripdata_2020-01.csv', 'green_tripdata_2021-01.csv') -- Alternate to Specifying in BULK\nGROUP BY TripData.filename()\nORDER BY file_name ASC;\n\n\n-- FILEPATH Function\nSELECT\n    TripData.filepath() AS file_path\n    -- Using Ordinal Wildcard Position\n    ,TripData.filepath(1) AS year\n    ,TripData.filepath(2) AS month\n    ,TripData.filepath(3) AS file_name\n    ,COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv', -- ** All Folders and Sub-Folders\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData\nGROUP BY TripData.filepath(), TripData.filepath(1), TripData.filepath(2), TripData.filepath(3)\nORDER BY file_path ASC;\n\n\n-- FILEPATH Function w/ WHERE Clause\nSELECT\n    TripData.filepath() AS file_path\n    -- Using Ordinal Wildcard Position\n    ,TripData.filepath(1) AS year\n    ,TripData.filepath(2) AS month\n    ,TripData.filepath(3) AS file_name\n    ,COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv', -- ** Best Practice be Explicit\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData\nWHERE 1=1\n    AND TripData.filepath(1) = '2020'\n    AND TripData.filepath(2) IN ('06', '07', '08')\nGROUP BY TripData.filepath(), TripData.filepath(1), TripData.filepath(2), TripData.filepath(3)\nORDER BY file_path ASC;\n\n\n-- Examine Data Types\n-- Escape Single Quotes in Query\nEXEC sp_describe_first_result_set N'\n    SELECT\n        TOP 100 *\n    FROM\n        OPENROWSET(\n            BULK ''https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv'',\n            FORMAT = ''CSV'',\n            PARSER_VERSION = ''2.0'',\n            HEADER_ROW = TRUE\n        ) AS TaxiZone\n'\n\n\n-- Determine Actual Max Length per Column\nSELECT\n    MAX(LEN(LocationID)) AS Len_LocationID\n    ,MAX(LEN(Borough)) AS Len_Borough\n    ,MAX(LEN(Zone)) AS Len_Zone\n    ,MAX(LEN(service_zone)) AS Len_Service_Zone\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TaxiZone",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_folders_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_folders"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Select All Files From Folder w/ Single File\nSELECT\n    TOP 100\n    TripData.filename() AS file_name\n    ,TripData.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/', -- *, *.csv\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData\n\n\n-- Select All Files From Folder w/ Sub-Folders\nSELECT\n    TOP 100\n    TripData.filename() AS file_name\n    ,TripData.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**', -- ** All Underlying Sub-Folders\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData\n\n\nSELECT\n    TOP 100\n    TripData.filename() AS file_name\n    ,TripData.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv', -- ** All Folders and Sub-Folders\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData\n\n\n-- Select All Files From Folder and Specified Sub-Folders\nSELECT\n    TOP 100\n    TripData.filename() AS file_name\n    ,TripData.*\nFROM\n    OPENROWSET(\n        BULK    (\n            'trip_data_green_csv/year=2020/month=01/*.csv',\n            'trip_data_green_csv/year=2020/month=03/*.csv'\n        ),\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TripData",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_folders_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_folders"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query Folder w/ Wildcard\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\n\n-- Query Folder w/ Sub-Folders\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/**',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\n\n-- Query Folder w/ FILENAME Function\nSELECT\n    TOP 100\n    TripData.filename() AS file_name\n    ,TripData.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/**',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\n\n-- Query Folder w/ FILEPATH Function\nSELECT\n    TripData.filepath(1) AS year\n    ,TripData.filepath(2) AS month\n    ,TripData.filepath(3) AS file_name\n    ,COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\nWHERE 1=1\n    AND TripData.filepath(1) = '2020'\n    AND TripData.filepath(2) IN ('01', '04', '06')\nGROUP BY TripData.filepath(1), TripData.filepath(2), TripData.filepath(3)\nORDER BY TripData.filepath(1), TripData.filepath(2), TripData.filepath(3);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_json_array')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_json"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query JSON Array w/ JSON_VALUES\nSELECT\n    JSON_VALUE (jsonDoc, '$.payment_type') AS PaymentType\n    ,JSON_VALUE (jsonDoc, '$.payment_type_desc[0].value') AS PaymentTypeDescription -- Use Index Position of Array\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS PaymentType\n\n\n-- Query JSON Array w/ OPENJSON\nSELECT\n    PaymentType\n    ,PaymentTypeDescription\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS PaymentType\n\nCROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n    WITH(\n        PaymentType         SMALLINT        '$.payment_type'\n        ,payment_type_desc  NVARCHAR(MAX)   AS JSON\n    )\n\nCROSS APPLY OPENJSON(payment_type_desc)\n    WITH(\n        PaymentSubType          SMALLINT    '$.sub_type'\n        ,PaymentTypeDescription VARCHAR(20) '$.value'\n    )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_multiline_json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_json"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query Multi-Line JSON Values w/ OPENJSON\n-- OPENJSON = More Efficient, More Functionality\nSELECT\n    RateCodeID\n    ,RateCodeDescription\nFROM\n    OPENROWSET(\n        BULK 'rate_code_multi_line.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b' -- Vertical Tab\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS RateCode\n\nCROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n    WITH(\n        RateCodeID              TINYINT     '$.rate_code_id'\n        ,RateCodeDescription    VARCHAR(20) '$.rate_code'\n    )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_columnar"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query Single File\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\n\n-- Query Data Types\n-- Parquet Infers Data Types from Metadata (More Accurate)\nEXEC sp_describe_first_result_set N'\n    SELECT\n        TOP 100 *\n    FROM\n        OPENROWSET(\n            BULK ''trip_data_green_parquet/year=2020/month=01/*.parquet'',\n            DATA_SOURCE = ''NYC_Taxi_Raw'',\n            FORMAT = ''PARQUET''\n        ) AS TripData\n'\n\n\n-- Query w/ Explicit Data Types\n-- Most Inferred Data Types are Correct\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH(\n        VendorID                INT\n        ,lpep_pickup_datetime   DATETIME2(7)\n        ,lpep_dropoff_datetime  DATETIME2(7)\n        ,store_and_fwd_flag     CHAR(1)\n        ,RatecodeID             INT\n        ,PULocationID           INT\n        ,DOLocationID           INT\n        ,passenger_count        INT\n        ,trip_distance          FLOAT\n        ,fare_amount            FLOAT\n        ,extra                  FLOAT\n        ,mta_tax                FLOAT\n        ,tip_amount             FLOAT\n        ,tolls_amount           FLOAT\n        ,ehail_fee              INT\n        ,improvement_surcharge  FLOAT\n        ,total_amount           FLOAT\n        ,payment_type           INT\n        ,trip_type              INT\n        ,congestion_surcharge   FLOAT\n    ) AS TripData\n\n\n-- Query w/ Explicit Data Types and Columns (More Cost Efficient)\n-- Most Inferred Data Types are Correct\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH(\n        VendorID                INT\n        ,lpep_pickup_datetime   DATETIME2(7)\n        ,lpep_dropoff_datetime  DATETIME2(7)\n        ,trip_distance          FLOAT\n        ,fare_amount            FLOAT\n        ,tip_amount             FLOAT\n        ,tolls_amount           FLOAT\n        ,total_amount           FLOAT\n        ,trip_type              INT\n    ) AS TripData",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_standard_json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_json"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query Standard JSON Values w/ OPENJSON\n-- OPENJSON = More Efficient, More Functionality\nSELECT\n    RateCodeID\n    ,RateCodeDescription\nFROM\n    OPENROWSET(\n        BULK 'rate_code.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b' -- Vertical Tab\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS RateCode\n\nCROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n    WITH(\n        RateCodeID              TINYINT     '$.rate_code_id'\n        ,RateCodeDescription    VARCHAR(20) '$.rate_code'\n    )\n\n\nSELECT\n    PaymentType\n    ,PaymentTypeDescription\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV', -- Even for JSON\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS PaymentType\n\nCROSS APPLY OPENJSON(jsonDoc) -- Return Key Value Pairs\n    WITH(\n        PaymentType             SMALLINT    '$.payment_type'\n        ,PaymentTypeDescription VARCHAR(15) '$.payment_type_desc'\n    )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_trip_type_tsv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query Trip Type TSV File\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '\\t',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n) AS TripType\n\n\n-- Query Trip Type Data Types\nEXEC sp_describe_first_result_set N'\n    SELECT\n        TOP 100 *\n    FROM\n        OPENROWSET(\n            BULK ''trip_type.tsv'',\n            DATA_SOURCE = ''NYC_Taxi_Raw'',\n            FORMAT = ''CSV'',\n            FIELDTERMINATOR = ''\\t'',\n            PARSER_VERSION = ''2.0'',\n            HEADER_ROW = TRUE\n    ) AS TripType\n'\n\n\n-- Query Trip Type TSV File w/ Optimizaed Data Types and Size\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '\\t',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )\n    WITH(\n        TripType                SMALLINT    1\n        ,TripTypeDescription    VARCHAR(25) 2\n    ) AS TripType",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/quoted_escaped_columns')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Query CSV File w/ Additional Comma\n-- \", Inc\" Ignored\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vendor_unquoted.csv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n) AS Vendor\n\n\n-- Escape Character\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vendor_escaped.csv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ESCAPECHAR = '\\'\n) AS Vendor\n\n\n-- Quote Character\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vendor.csv',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDQUOTE = '\"' -- Optional. Default is \"\"\n) AS Vendor",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/specify_collation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "-- Examine Database Collation\nSELECT\n    name\n    ,collation_name\nFROM sys.databases;\n\n\n-- Apply Collation to a Query\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH(\n        LocationID      SMALLINT\n        ,Borough        VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n        ,Zone           VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n        ,service_zone   VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    ) AS TaxiZone\n\n\n-- Apply Collation to a Database\n-- Not Applicable to Master Database\nUSE NYC_Taxi_Serverless;\nALTER DATABASE NYC_Taxi_Serverless COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n\n-- Confirm Collation Change\nSELECT\n    name\n    ,collation_name\nFROM sys.databases;\n\n\n-- Query Will Now Run w/o Collation Warnings\n-- Must Be Using Appropriate Database\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH(\n        LocationID      SMALLINT\n        ,Borough        VARCHAR(15)\n        ,Zone           VARCHAR(50)\n        ,service_zone   VARCHAR(15)\n    ) AS TaxiZone",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/specify_data_types')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "query_csv"
				},
				"content": {
					"query": "-- Examine Data Types\n-- Escape Single Quotes in Query\nEXEC sp_describe_first_result_set N'\n    SELECT\n        TOP 100 *\n    FROM\n        OPENROWSET(\n            BULK ''https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv'',\n            FORMAT = ''CSV'',\n            PARSER_VERSION = ''2.0'',\n            HEADER_ROW = TRUE\n        ) AS TaxiZone\n'\n\n\n-- Determine Actual Max Length per Column\nSELECT\n    MAX(LEN(LocationID)) AS Len_LocationID\n    ,MAX(LEN(Borough)) AS Len_Borough\n    ,MAX(LEN(Zone)) AS Len_Zone\n    ,MAX(LEN(service_zone)) AS Len_Service_Zone\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS TaxiZone\n\n\n/*\n- Adjusting data types and sizes has cost and permofrmance implications.\n- Synapse is generous with its data type and size assignment.\n- It is a best practice to adjust sizes when running queries in Serverless to minimize cost.\n*/\n\n\n-- Use WITH to Provide Explicit Data Types\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH(\n        LocationID      SMALLINT\n        ,Borough        VARCHAR(15)\n        ,Zone           VARCHAR(50)\n        ,service_zone   VARCHAR(15)\n    ) AS TaxiZone\n\n\n-- Confirm Explicit Data Types\nEXEC sp_describe_first_result_set N'\n    SELECT\n        TOP 100 *\n    FROM\n        OPENROWSET(\n            BULK ''https://synlakehousedev.dfs.core.windows.net/file-drop/taxi_zone.csv'',\n            FORMAT = ''CSV'',\n            PARSER_VERSION = ''2.0'',\n            HEADER_ROW = TRUE\n        )\n        WITH(\n            LocationID      SMALLINT\n            ,Borough        VARCHAR(15)\n            ,Zone           VARCHAR(50)\n            ,service_zone   VARCHAR(15)\n        ) AS TaxiZone\n'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/transform_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "data_discovery"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n\n-- Explore\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\n\n\n-- Explore DATEDIFF\n-- Determine Count of Trips per Hour Duration\nSELECT\n    DATEDIFF (MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime) / 60 AS min_range_hour\n    ,(DATEDIFF (MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime) / 60) + 1 AS max_range_hour\n    ,COUNT(1) AS trip_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'NYC_Taxi_Raw',\n        FORMAT = 'PARQUET'\n    ) AS TripData\nGROUP BY\n    DATEDIFF (MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime) / 60\n    ,(DATEDIFF (MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime) / 60) + 1\nORDER BY min_range_hour ASC;\n\n\n/* In this case, we would want to delete the records where drop off is < pick up.\nThis is not possible and there are only 2 such records in the data.\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYC_Taxi_Dedicated')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_trip_csv_processed')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Partitioned Data",
				"folder": {
					"name": "dw_serverless/create_external_tables_processed"
				},
				"content": {
					"query": "USE NYC_Taxi_Serverless\nGO\n\n-- Data Written to ADLS Cannot be Deleted Here\n-- Delete via Pipelines and Call Script as a Best Practice\n\n-- Taxi Zone\nIF OBJECT_ID ('Processed.Trip') IS NOT NULL\n    DROP EXTERNAL TABLE Processed.Trip\n    GO\n\nCREATE EXTERNAL TABLE Processed.Trip\n\n    WITH (\n        LOCATION = 'trip'\n        ,DATA_SOURCE = NYC_Taxi_Processed\n        ,FILE_FORMAT = Parquet_File_Format\n    )\n\nAS\n\n    -- SELECT *\n    -- FROM Raw.TripCSV;\n\n    -- Alternate: Use OPENROWSET if Raw Table Does Not Exists\n    -- Preferred Method, Simple Column Renaming\n    -- Issue w/ Partitioned Data: This Will Not Maintain Partitions (Added ParitionYear and PartitionMonth for Simple Filtering)\n    SELECT TOP 100\n        Trip.filepath(1) AS PartitionYear\n        ,Trip.filepath(2) AS PartitionMonth\n        ,Trip.*\n    FROM\n        OPENROWSET (\n            BULK 'trip_data_green_csv/year=*/month=*/*.csv'\n            ,DATA_SOURCE = 'NYC_Taxi_Raw'\n            ,FORMAT = 'CSV'\n            ,PARSER_VERSION = '2.0'\n            ,HEADER_ROW = TRUE\n        ) AS Trip\n\n\n-- Query Processed Table\nSELECT TOP 10 * FROM Processed.Trip;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "NYC_Taxi_Serverless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}