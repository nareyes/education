-- INTRODUCE CLUSTER KEYS FOR LARGE TABLES
-- CLUSTER KEYS CREATE SUBSET OF DATA IN MICRO-PARTITIONS
-- IMPROVES SCAN EFFICIENCY FOR LARGE TABLES
-- TYPICALLY AUTOMATED BY SNOWFLAKE


-- CREATE STAGE
CREATE OR REPLACE STAGE MANAGE_DB.PUBLIC.AWS_STAGE
    URL = 's3://bucketsnowflakes3/';

LIST @MANAGE_DB.PUBLIC.AWS_STAGE;


-- LOAD DATA INTO ORDERS TABLE
TRUNCATE TABLE DEMO_DB.PUBLIC.ORDERS;

COPY INTO DEMO_DB.PUBLIC.ORDERS
    FROM @MANAGE_DB.PUBLIC.AWS_STAGE
    FILE_FORMAT = MANAGE_DB.PUBLIC.CSV_FORMAT
    PATTERN = '.*OrderDetails.*';

SELECT * FROM DEMO_DB.PUBLIC.ORDERS;


-- CREATE TABLE FOR CACHING DEMO
CREATE OR REPLACE TABLE DEMO_DB.PUBLIC.ORDERS_CACHING (
    ORDER_ID    VARCHAR(30),
    AMOUNT      NUMBER(38, 0),
    PROFIT      NUMBER(38, 0),
    QUANTITY    NUMBER(38, 0),
    CATEGORY    VARCHAR(30),
    SUBCATEGORY VARCHAR(30),
    DATE        DATE
);

SELECT * FROM DEMO_DB.PUBLIC.ORDERS_CACHING;


-- INSERT DUPLICATE DATA INTO ORDERS CACHING FOR DEMO
INSERT INTO DEMO_DB.PUBLIC.ORDERS_CACHING (
    SELECT
        T1.ORDER_ID,
        T1.AMOUNT,
        T1.PROFIT,	
        T1.QUANTITY,	
        T1.CATEGORY,	
        T1.SUBCATEGORY,	
        DATE(UNIFORM(1500000000,1700000000,(RANDOM())))
    FROM DEMO_DB.PUBLIC.ORDERS T1
        CROSS JOIN (SELECT * FROM DEMO_DB.PUBLIC.ORDERS) T2
        CROSS JOIN (SELECT TOP 100 * FROM DEMO_DB.PUBLIC.ORDERS) T3
);


-- QUERY PERFORMANCE BEFORE CLUSTER KEY
SELECT * FROM DEMO_DB.PUBLIC.ORDERS_CACHING WHERE DATE = '2020-06-09';


-- ADD CLUSTER AND RUN QUERY TO COMPARE RESULTS
ALTER TABLE DEMO_DB.PUBLIC.ORDERS_CACHING
    CLUSTER BY (DATE);

SELECT * FROM DEMO_DB.PUBLIC.ORDERS_CACHING WHERE DATE = '2020-01-05'; -- DIFFERENT DATE TO PREVENT CACHING BENEFIT